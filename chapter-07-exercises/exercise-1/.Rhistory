# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Paolo", "Kelly", "Jackson")
names
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
n + 1
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10,1)
# Subtract `m` FROM `n`. Note the recycling!
n - m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 0.1, 10)
?seq
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
wave <- sin_wave * cos_wave + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <-21:30
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- paste(first_ten, next_ten)
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21,30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- seq(first_ten, next_ten)
typeof(first_ten)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- c(10:20)
typeof(first_ten)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
temp <- 10:20
first_ten <- c(temp)
typeof(first_ten)
a <- c(1,2,3)
typeof(a)
typeof(a)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
all_numbers[11]
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
num <- 1:100
even <- num[FALSE,TRUE]
TEMP <- [FALSE, TRUE]
even <- num[c(FALSE,TRUE)]
?all()
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(100)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even%%2 = 0)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even%%2= 0)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even%%2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2)
all(even %% 2)
even %% 2
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
is_even <_ even%%2
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
is_even <- even%%2
all(is_even = 0)
all(is_even == 0)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even%%2 == 0)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers <= 5]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers > 5] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[c(TRUE, FALSE)] <- 0
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <-list(drink="milk", food="bread")
View(my_breakfast)
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- list(drink="water", food="fried rice")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast=my_breakfast, lunch=my_lunch)
View(meals)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("beef", "rice")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals["breakfast", "lunch"]
early_meals$lunch <- meals["lunch"]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals["breakfast"]
early_meals$lunch <- meals["lunch"]
View(early_meals)
early_meals <- meals[1:2]
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
breakfast_item <- lapply(my_breakfast, length())
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
breakfast_item <- lapply(my_breakfast, length
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
breakfast_item <- lapply(my_breakfast, length)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
breakfast_item <- lapply(my_breakfast, length)
View(breakfast_item)
lunch_item <- lapply(my_lunch, length)
dinner_item <- lapply(dinner, length)
early_meals <- meals[1:2]
items <- lapply(meals, length)
add_pizza <- function(m){
result <- c(m, "pizza")
return(result)
}
View(add_pizza)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meal, add_pizza)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
View(better_meals)
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
ran_num <- runif(10)
ran_num <- as.list(ran_num)
View(ran_num)
?runif
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
ran_num <- runif(10,0,10)
ran_num <- as.list(ran_num)
View(ran_num)
# Use `lapply()` to apply the `round()` function to each number, rounding it to
# the nearest 0.1 (one decimal place)
rounded <- lapply(ran_num, round)
View(rounded)
View(rounded)
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- "info201 is a tough class"
?strsplit
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
str_array <- strsplit(sentence,")
# Extract the vector of letters from the resulting list
# Use the `unique()` function to get a vector of unique letters
# Define a function `count_occurrences` that takes in two parameters: a letter
# and a vector of letters. The function should return how many times that letter
# occurs in the provided vector.
# Hint: use a filter operation!
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
# Print the resulting list of frequencies
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
str_array <- strsplit(sentence,")
# Extract the vector of letters from the resulting list
# Use the `unique()` function to get a vector of unique letters
# Define a function `count_occurrences` that takes in two parameters: a letter
# and a vector of letters. The function should return how many times that letter
# occurs in the provided vector.
# Hint: use a filter operation!
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
# Print the resulting list of frequencies
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
str_array <- strsplit(sentence,"")
# Extract the vector of letters from the resulting list
letters <- str_array[[1]]
?unique
# Use the `unique()` function to get a vector of unique letters
unique_letters <- unique(letters)
?filter
?scan
count_occurrences <- function(letter, vector){
vector_of_same_letter <- vector[vector == letter] #vectorized operation
result <- length(vector_of_same_letter)
return(result)
}
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("e", sentence)
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("a", sentence)
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("a", sentence)
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("a", letters)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
count <- sapply(unique, count_occurrences, letters)
frequencies <- as.list(count)
View(frequencies)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
count <- sapply(unique_letters, count_occurrences, letters)
frequencies <- as.list(count)
View(frequencies)
count <- lapply(unique_letters, count_occurrences, letters)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
count <- sapply(unique_letters, count_occurrences, letters)
frequencies <- as.list(count)
lapply(unique_letters, count_occurrences, letters)
sapply(unique_letters, count_occurrences, letters)
# Print the resulting list of frequencies
frequencies
View(frequencies)
# Print the resulting list of frequencies
print(frequencies)
# Print the resulting list of frequencies
cat(frequencies)
# Print the resulting list of frequencies
print(frequencies)
# Print the resulting list of frequencies
print(sapply(unique_letters, count_occurrences, letters))
# Print the resulting list of frequencies
print(as.list(sapply(unique_letters, count_occurrences, letters)))
# Print the resulting list of frequencies
print(frequencies)
lapply(unique_letters, count_occurrences, letters)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
score <- c(21,28,27,27)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
scored_against <- c(20,26,33,10)
?data.frame
# Combine your two vectors into a dataframe called `games`
data.frame(score,scored_against)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(score,scored_against)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- c(games$score - games$scored_against)
View(games)
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
View(games)
View(games)
# Create a vector of the opponent names corresponding to the games played
opponent <- c("Bengals","Steelers","Saints","Cordinals")
?rownames
# Assign your dataframe rownames of their opponents
rownames(games) <- opponent
# View your data frame to see how it has changed!
view(games)
# View your data frame to see how it has changed!
View(games)
